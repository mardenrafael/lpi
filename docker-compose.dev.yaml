version: '3.8'

services:
  db:
    image: postgres:16
    container_name: login-api-db
    volumes:
      - db-data:/var/lib/postgresql/data
    env_file:
      - .env
    healthcheck:
      test:
        ['CMD-SHELL', 'pg_isready', '-U', '${PGUSER}', '-d', '${POSTGRES_DB}']
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 5s
    networks:
      app-network:
        ipv4_address: 10.1.0.20

  api:
    build:
      context: .
      target: DEV
    container_name: login-api
    env_file:
      - .env
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'curl -f http://api:${APPLICATION_PORT}/health/check || exit 1',
        ]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 5s
    volumes:
      - ./:/home/node/login-api
    networks:
      app-network:
        ipv4_address: 10.1.0.21
    depends_on:
      db:
        condition: 'service_healthy'
        restart: true

  pg-admin:
    image: elestio/pgadmin
    restart: always
    container_name: login-api-pg-admin
    env_file:
      - .env
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'wget --spider -O - http://pg-admin:${PGADMIN_LISTEN_PORT}/misc/ping',
        ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s
    networks:
      app-network:
        ipv4_address: 10.1.0.22
    depends_on:
      db:
        condition: 'service_healthy'
        restart: true

  proxy:
    image: nginx
    container_name: login-api-proxy
    volumes:
      - ./infra/nginx/nginx.conf.template:/etc/nginx/templates/default.conf.template
    ports:
      - '10.1.0.1:80:${NGINX_APP_PORT}'
      - '10.1.0.1:8080:${NGINX_ADMIN_PORT}'
      - '10.1.0.1:9000:${NGINX_PORTAINER_PORT}'
    env_file:
      - .env
    networks:
      app-network:
        ipv4_address: 10.1.0.23
    healthcheck:
      test: ['CMD-SHELL', 'service nginx status']
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 15s
    depends_on:
      db:
        condition: 'service_healthy'
        restart: true
      api:
        condition: 'service_healthy'
        restart: true
      pg-admin:
        condition: 'service_healthy'
        restart: true
      portainer:
        condition: 'service_healthy'
        restart: true

  portainer:
    image: portainer/portainer-ce:alpine
    restart: always
    container_name: login-api-portainer
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - portainer-data:/data
    healthcheck:
      test: 'wget --no-verbose --tries=1 --spider http://localhost:9000 || exit 1'
      interval: 60s
      timeout: 5s
      retries: 3
      start_period: 20s
    networks:
      app-network:
        ipv4_address: 10.1.0.24

networks:
  app-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 10.1.0.0/24
          gateway: 10.1.0.1

volumes:
  db-data:
  portainer-data:
